//////////////////////////////////////////////////
//                                              //
// ThePicoSID                                   //
// von Thorsten Kattanek                        //
//                                              //
// #file: /pio/write_sid_reg.pio                //
//                                              //
// https://github.com/ThKattanek/the_pico_sid   //
//                                              //
//////////////////////////////////////////////////;

.program write_sid_reg

	set y, 0x01		;CLK = 1 and RW = 0
	
.wrap_target
wait_to_cs_low:
	jmp pin wait_to_cs_low
 
	out isr, 2
	in pins, 2
	mov x, isr
	jmp x!=y, wait_to_cs_high

	in pins, 15
	push
	out isr, 15

    irq 0

wait_to_cs_high:
	jmp pin wait_to_cs_low
	jmp wait_to_cs_high
.wrap             

% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void write_sid_reg_program_init(PIO pio, uint sm, uint offset, uint clk_pin, uint cs_pin) {
   
   pio_sm_config c = write_sid_reg_program_get_default_config(offset);

   // config CLK and RW Signal
   sm_config_set_in_pins(&c, clk_pin);
   
   for(int i=0; i<15; i++)
	   pio_gpio_init(pio, clk_pin + i);

   pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 15, GPIO_IN);

   // config CS Signal
   pio_gpio_init(pio, cs_pin);
   pio_sm_set_consecutive_pindirs(pio, sm, cs_pin, 1, GPIO_IN);   
   sm_config_set_jmp_pin(&c, cs_pin);

	sm_config_set_in_shift(&c,
                           false, // don't shift right
                           false, // don't autopush
                           15);   // push threshold (doesn't matter)

   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
}
%}